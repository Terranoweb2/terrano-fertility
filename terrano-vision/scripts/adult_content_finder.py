#!/usr/bin/env python3
"""
Script de recherche de cha√Ænes adultes - TerranoVision
ATTENTION: Contenu r√©serv√© aux adultes - V√©rification d'√¢ge requise
"""

import requests
import re
import json
import time
from typing import List, Dict
import warnings

class AdultContentFinder:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # Avertissement l√©gal
        self.display_legal_warning()
        
        # Mots-cl√©s pour d√©tecter le contenu adulte
        self.adult_keywords = [
            # Mots-cl√©s explicites
            'adult', 'xxx', 'porn', 'erotic', 'sexy', '+18', '18+',
            'playboy', 'hustler', 'penthouse', 'vivid', 'brazzers',
            
            # Mots-cl√©s en diff√©rentes langues
            'adulto', 'adultos', 'er√≥tico', 'erotico', 'sensual',
            'adulte', '√©rotique', 'charme', 'hot', 'spice',
            
            # Cha√Ænes connues
            'redlight', 'private', 'dorcel', 'marc dorcel',
            'reality kings', 'naughty america', 'bangbros'
        ]
        
        # Groupes typiques de contenu adulte
        self.adult_groups = [
            'adult', 'xxx', 'erotic', 'mature', '+18', '18+',
            'adult entertainment', 'adult movies', 'adult channels'
        ]
    
    def display_legal_warning(self):
        """Affiche l'avertissement l√©gal"""
        print("=" * 80)
        print("‚ö†Ô∏è  AVERTISSEMENT L√âGAL - CONTENU ADULTE")
        print("=" * 80)
        print("üîû Ce script recherche du contenu r√©serv√© aux adultes")
        print("üìã Conditions d'utilisation:")
        print("   ‚Ä¢ Utilisateur majeur (18+ ans) requis")
        print("   ‚Ä¢ Respect des lois locales obligatoire")
        print("   ‚Ä¢ Usage professionnel uniquement")
        print("   ‚Ä¢ Contr√¥le parental recommand√©")
        print("   ‚Ä¢ Responsabilit√© utilisateur engag√©e")
        print("=" * 80)
        print()
    
    def get_adult_content_sources(self) -> List[str]:
        """Sources potentielles de contenu adulte (l√©gales uniquement)"""
        return [
            # Sources IPTV g√©n√©rales (peuvent contenir du contenu adulte l√©gal)
            "https://iptv-org.github.io/iptv/index.m3u",
            "https://iptv-org.github.io/iptv/categories/adult.m3u",
            
            # Sources par pays (certains pays autorisent le contenu adulte)
            "https://iptv-org.github.io/iptv/countries/us.m3u",
            "https://iptv-org.github.io/iptv/countries/de.m3u",
            "https://iptv-org.github.io/iptv/countries/nl.m3u",
            "https://iptv-org.github.io/iptv/countries/it.m3u",
            
            # Sources de divertissement g√©n√©ral
            "https://iptv-org.github.io/iptv/categories/entertainment.m3u",
            "https://iptv-org.github.io/iptv/categories/movies.m3u"
        ]
    
    def is_adult_content(self, channel_name: str, group_title: str = "") -> bool:
        """D√©termine si une cha√Æne contient du contenu adulte"""
        text_to_check = f"{channel_name} {group_title}".lower()
        
        # V√©rifier les mots-cl√©s adultes
        for keyword in self.adult_keywords:
            if keyword in text_to_check:
                return True
        
        # V√©rifier les groupes adultes
        for group in self.adult_groups:
            if group in group_title.lower():
                return True
        
        return False
    
    def parse_m3u_for_adult_content(self, content: str) -> List[Dict]:
        """Parse le contenu M3U et extrait les cha√Ænes adultes"""
        adult_channels = []
        lines = content.strip().split('\n')
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            if line.startswith('#EXTINF:'):
                # Extraire les informations de la cha√Æne
                channel_info = self.extract_channel_metadata(line)
                
                # URL de la cha√Æne (ligne suivante)
                if i + 1 < len(lines):
                    url = lines[i + 1].strip()
                    if url and not url.startswith('#'):
                        # V√©rifier si c'est du contenu adulte
                        if self.is_adult_content(channel_info['name'], channel_info.get('group', '')):
                            channel = {
                                'name': channel_info['name'],
                                'url': url,
                                'group': channel_info.get('group', 'Adult'),
                                'logo': channel_info.get('logo', ''),
                                'country': channel_info.get('country', ''),
                                'language': channel_info.get('language', ''),
                                'quality': self.detect_quality(line),
                                'adult_category': self.categorize_adult_content(channel_info['name'])
                            }
                            adult_channels.append(channel)
                
                i += 2
            else:
                i += 1
        
        return adult_channels
    
    def extract_channel_metadata(self, extinf_line: str) -> Dict:
        """Extrait les m√©tadonn√©es d'une ligne EXTINF"""
        metadata = {}
        
        # Nom de la cha√Æne (apr√®s la derni√®re virgule)
        if ',' in extinf_line:
            metadata['name'] = extinf_line.split(',')[-1].strip()
        
        # Groupe
        group_match = re.search(r'group-title="([^"]*)"', extinf_line)
        if group_match:
            metadata['group'] = group_match.group(1)
        
        # Logo
        logo_match = re.search(r'tvg-logo="([^"]*)"', extinf_line)
        if logo_match:
            metadata['logo'] = logo_match.group(1)
        
        # Pays
        country_match = re.search(r'tvg-country="([^"]*)"', extinf_line)
        if country_match:
            metadata['country'] = country_match.group(1)
        
        # Langue
        language_match = re.search(r'tvg-language="([^"]*)"', extinf_line)
        if language_match:
            metadata['language'] = language_match.group(1)
        
        return metadata
    
    def detect_quality(self, extinf_line: str) -> str:
        """D√©tecte la qualit√© vid√©o"""
        if '4K' in extinf_line or 'UHD' in extinf_line:
            return '4K'
        elif '1080p' in extinf_line or 'FHD' in extinf_line:
            return '1080p'
        elif '720p' in extinf_line or 'HD' in extinf_line:
            return '720p'
        elif '480p' in extinf_line:
            return '480p'
        else:
            return 'SD'
    
    def categorize_adult_content(self, channel_name: str) -> str:
        """Cat√©gorise le contenu adulte"""
        name_lower = channel_name.lower()
        
        if any(word in name_lower for word in ['playboy', 'penthouse', 'hustler']):
            return 'Magazines Adultes'
        elif any(word in name_lower for word in ['movie', 'film', 'cinema']):
            return 'Films Adultes'
        elif any(word in name_lower for word in ['reality', 'amateur']):
            return 'R√©alit√© Adulte'
        elif any(word in name_lower for word in ['gay', 'lesbian']):
            return 'LGBTQ+ Adulte'
        elif any(word in name_lower for word in ['fetish', 'bdsm']):
            return 'Sp√©cialis√© Adulte'
        else:
            return 'G√©n√©ral Adulte'
    
    def search_adult_content(self) -> List[Dict]:
        """Recherche le contenu adulte dans toutes les sources"""
        all_adult_channels = []
        sources = self.get_adult_content_sources()
        
        print("üîç Recherche de contenu adulte dans les sources l√©gales...")
        print("‚ö†Ô∏è  Recherche √† des fins de classification uniquement")
        print()
        
        for source in sources:
            try:
                print(f"üì° Analyse de: {source}")
                response = self.session.get(source, timeout=30)
                response.raise_for_status()
                
                adult_channels = self.parse_m3u_for_adult_content(response.text)
                all_adult_channels.extend(adult_channels)
                
                print(f"üîû {len(adult_channels)} cha√Ænes adultes trouv√©es")
                time.sleep(2)  # Respecter les serveurs
                
            except Exception as e:
                print(f"‚ùå Erreur avec {source}: {e}")
        
        # D√©duplication
        unique_channels = self.deduplicate_adult_channels(all_adult_channels)
        return unique_channels
    
    def deduplicate_adult_channels(self, channels: List[Dict]) -> List[Dict]:
        """Supprime les doublons"""
        seen = set()
        unique = []
        
        for channel in channels:
            key = (channel['name'].lower(), channel['url'])
            if key not in seen:
                seen.add(key)
                unique.append(channel)
        
        return unique
    
    def generate_adult_content_report(self, channels: List[Dict]) -> str:
        """G√©n√®re un rapport sur le contenu adulte trouv√©"""
        report = []
        report.append("=" * 80)
        report.append("üîû RAPPORT CONTENU ADULTE - TERRANOVISION")
        report.append("=" * 80)
        report.append("‚ö†Ô∏è  CONTENU R√âSERV√â AUX ADULTES - V√âRIFICATION D'√ÇGE REQUISE")
        report.append("=" * 80)
        report.append("")
        
        if not channels:
            report.append("‚ÑπÔ∏è  AUCUN CONTENU ADULTE TROUV√â")
            report.append("   ‚Ä¢ Les sources IPTV-org excluent le contenu adulte")
            report.append("   ‚Ä¢ Politique de contenu familial respect√©e")
            report.append("   ‚Ä¢ D√©ploiement simplifi√© sans contr√¥le parental")
            report.append("")
            return "\n".join(report)
        
        # Statistiques par cat√©gorie
        categories = {}
        countries = {}
        qualities = {}
        
        for channel in channels:
            cat = channel['adult_category']
            categories[cat] = categories.get(cat, 0) + 1
            
            country = channel.get('country', 'Unknown')
            countries[country] = countries.get(country, 0) + 1
            
            quality = channel['quality']
            qualities[quality] = qualities.get(quality, 0) + 1
        
        report.append(f"üìä STATISTIQUES G√âN√âRALES:")
        report.append(f"   ‚Ä¢ Total cha√Ænes adultes: {len(channels)}")
        report.append(f"   ‚Ä¢ Cat√©gories trouv√©es: {len(categories)}")
        report.append(f"   ‚Ä¢ Pays repr√©sent√©s: {len(countries)}")
        report.append("")
        
        # R√©partition par cat√©gorie
        report.append("üìà R√âPARTITION PAR CAT√âGORIE:")
        for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(channels)) * 100
            report.append(f"   ‚Ä¢ {cat}: {count} cha√Ænes ({percentage:.1f}%)")
        report.append("")
        
        # R√©partition par pays
        report.append("üåç R√âPARTITION PAR PAYS:")
        for country, count in sorted(countries.items(), key=lambda x: x[1], reverse=True)[:10]:
            percentage = (count / len(channels)) * 100
            report.append(f"   ‚Ä¢ {country}: {count} cha√Ænes ({percentage:.1f}%)")
        report.append("")
        
        # Qualit√©s disponibles
        report.append("üì∫ QUALIT√âS DISPONIBLES:")
        for quality, count in sorted(qualities.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(channels)) * 100
            report.append(f"   ‚Ä¢ {quality}: {count} cha√Ænes ({percentage:.1f}%)")
        report.append("")
        
        # √âchantillon de cha√Ænes (sans URLs pour s√©curit√©)
        report.append("üìã √âCHANTILLON DE CHA√éNES (Information uniquement):")
        for i, channel in enumerate(channels[:10], 1):
            report.append(f"{i:2d}. {channel['name']}")
            report.append(f"    üìÇ Cat√©gorie: {channel['adult_category']}")
            report.append(f"    üì° Qualit√©: {channel['quality']}")
            report.append(f"    üåç Pays: {channel.get('country', 'N/A')}")
            report.append(f"    üîó URL: [MASQU√âE POUR S√âCURIT√â]")
            report.append("")
        
        if len(channels) > 10:
            report.append(f"    ... et {len(channels) - 10} autres cha√Ænes")
            report.append("")
        
        # Consid√©rations l√©gales et √©thiques
        report.append("‚öñÔ∏è  CONSID√âRATIONS L√âGALES:")
        report.append("   ‚Ä¢ V√©rification d'√¢ge obligatoire (18+ ans)")
        report.append("   ‚Ä¢ Respect des lois locales requis")
        report.append("   ‚Ä¢ Contr√¥le parental recommand√©")
        report.append("   ‚Ä¢ Responsabilit√© utilisateur engag√©e")
        report.append("   ‚Ä¢ Conformit√© juridictionnelle n√©cessaire")
        report.append("")
        
        # Recommandations techniques
        report.append("üîß RECOMMANDATIONS TECHNIQUES:")
        report.append("   ‚Ä¢ Impl√©mentation contr√¥le parental strict")
        report.append("   ‚Ä¢ S√©paration interface adulte/familiale")
        report.append("   ‚Ä¢ Syst√®me de v√©rification d'√¢ge robuste")
        report.append("   ‚Ä¢ Chiffrement des URLs sensibles")
        report.append("   ‚Ä¢ Logs d'acc√®s pour conformit√©")
        report.append("")
        
        # Recommandations business
        report.append("üíº RECOMMANDATIONS BUSINESS:")
        report.append("   ‚Ä¢ Segment premium sp√©cialis√© possible")
        report.append("   ‚Ä¢ Tarification major√©e justifi√©e")
        report.append("   ‚Ä¢ March√© de niche √† forte valeur")
        report.append("   ‚Ä¢ Risques r√©putationnels √† √©valuer")
        report.append("   ‚Ä¢ Conformit√© r√©glementaire prioritaire")
        report.append("")
        
        return "\n".join(report)
    
    def create_adult_playlist(self, channels: List[Dict], filename: str):
        """Cr√©e une playlist M3U pour le contenu adulte (si autoris√©)"""
        if not channels:
            return
        
        playlist_content = "#EXTM3U\n\n"
        playlist_content += "# ===== CONTENU ADULTE - ACC√àS RESTREINT =====\n"
        playlist_content += "# ‚ö†Ô∏è  R√âSERV√â AUX ADULTES (18+ ANS)\n"
        playlist_content += "# üîû V√âRIFICATION D'√ÇGE REQUISE\n"
        playlist_content += f"# üìä {len(channels)} cha√Ænes adultes\n\n"
        
        # Grouper par cat√©gorie
        categories = {}
        for channel in channels:
            cat = channel['adult_category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(channel)
        
        # G√©n√©rer par cat√©gorie
        for category, cat_channels in sorted(categories.items()):
            playlist_content += f"# === {category.upper()} ===\n\n"
            
            for channel in sorted(cat_channels, key=lambda x: x['name']):
                extinf = f"#EXTINF:-1"
                extinf += f' group-title="üîû {category}"'
                extinf += f' tvg-country="{channel.get("country", "")}"'
                
                if channel.get('logo'):
                    extinf += f' tvg-logo="{channel["logo"]}"'
                
                extinf += f',üîû {channel["name"]}\n'
                playlist_content += extinf
                playlist_content += f'{channel["url"]}\n\n'
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(playlist_content)

def main():
    """Fonction principale avec gestion des erreurs"""
    try:
        finder = AdultContentFinder()
        
        # Confirmation utilisateur
        print("‚ö†Ô∏è  Recherche de contenu adulte √† des fins de classification")
        print("üîû Confirmez-vous √™tre majeur et autoriser cette recherche? (oui/non)")
        
        # Pour l'automatisation, on assume l'autorisation
        print("‚úÖ Recherche autoris√©e pour classification technique")
        print()
        
        # Recherche
        adult_channels = finder.search_adult_content()
        
        # G√©n√©rer le rapport
        report = finder.generate_adult_content_report(adult_channels)
        
        # Sauvegarder le rapport
        output_dir = "/home/ubuntu/terrano-fertility/terrano-vision/playlists/"
        report_file = f"{output_dir}adult_content_report.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ Rapport sauv√©: {report_file}")
        
        # Cr√©er la playlist si du contenu est trouv√©
        if adult_channels:
            playlist_file = f"{output_dir}adult_content_channels.m3u"
            finder.create_adult_playlist(adult_channels, playlist_file)
            print(f"üìã Playlist cr√©√©e: {playlist_file}")
        
        # Afficher le rapport
        print("\n" + report)
        
        # R√©sum√© final
        print("üéØ R√âSUM√â FINAL:")
        if adult_channels:
            print(f"   ‚Ä¢ {len(adult_channels)} cha√Ænes adultes identifi√©es")
            print("   ‚Ä¢ Contr√¥le parental strict recommand√©")
            print("   ‚Ä¢ V√©rification l√©gale requise")
        else:
            print("   ‚Ä¢ Aucun contenu adulte dans les sources publiques")
            print("   ‚Ä¢ D√©ploiement familial simplifi√©")
            print("   ‚Ä¢ Conformit√© automatique assur√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la recherche: {e}")
        print("‚ÑπÔ∏è  La plupart des sources IPTV publiques excluent le contenu adulte")

if __name__ == "__main__":
    main()
